// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.3.2
// source: video/video.proto

package tycoon_services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoManagementClient is the client API for VideoManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoManagementClient interface {
	CreateNewVideoUpload(ctx context.Context, in *NewVideo, opts ...grpc.CallOption) (*Video, error)
	ReturnVideoJobResult(ctx context.Context, in *Video, opts ...grpc.CallOption) (*Video, error)
}

type videoManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoManagementClient(cc grpc.ClientConnInterface) VideoManagementClient {
	return &videoManagementClient{cc}
}

func (c *videoManagementClient) CreateNewVideoUpload(ctx context.Context, in *NewVideo, opts ...grpc.CallOption) (*Video, error) {
	out := new(Video)
	err := c.cc.Invoke(ctx, "/video.videoManagement/CreateNewVideoUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoManagementClient) ReturnVideoJobResult(ctx context.Context, in *Video, opts ...grpc.CallOption) (*Video, error) {
	out := new(Video)
	err := c.cc.Invoke(ctx, "/video.videoManagement/returnVideoJobResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoManagementServer is the server API for VideoManagement service.
// All implementations must embed UnimplementedVideoManagementServer
// for forward compatibility
type VideoManagementServer interface {
	CreateNewVideoUpload(context.Context, *NewVideo) (*Video, error)
	ReturnVideoJobResult(context.Context, *Video) (*Video, error)
	mustEmbedUnimplementedVideoManagementServer()
}

// UnimplementedVideoManagementServer must be embedded to have forward compatible implementations.
type UnimplementedVideoManagementServer struct {
}

func (UnimplementedVideoManagementServer) CreateNewVideoUpload(context.Context, *NewVideo) (*Video, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewVideoUpload not implemented")
}
func (UnimplementedVideoManagementServer) ReturnVideoJobResult(context.Context, *Video) (*Video, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnVideoJobResult not implemented")
}
func (UnimplementedVideoManagementServer) mustEmbedUnimplementedVideoManagementServer() {}

// UnsafeVideoManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoManagementServer will
// result in compilation errors.
type UnsafeVideoManagementServer interface {
	mustEmbedUnimplementedVideoManagementServer()
}

func RegisterVideoManagementServer(s grpc.ServiceRegistrar, srv VideoManagementServer) {
	s.RegisterService(&VideoManagement_ServiceDesc, srv)
}

func _VideoManagement_CreateNewVideoUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewVideo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoManagementServer).CreateNewVideoUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.videoManagement/CreateNewVideoUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoManagementServer).CreateNewVideoUpload(ctx, req.(*NewVideo))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoManagement_ReturnVideoJobResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Video)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoManagementServer).ReturnVideoJobResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/video.videoManagement/returnVideoJobResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoManagementServer).ReturnVideoJobResult(ctx, req.(*Video))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoManagement_ServiceDesc is the grpc.ServiceDesc for VideoManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "video.videoManagement",
	HandlerType: (*VideoManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewVideoUpload",
			Handler:    _VideoManagement_CreateNewVideoUpload_Handler,
		},
		{
			MethodName: "returnVideoJobResult",
			Handler:    _VideoManagement_ReturnVideoJobResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video/video.proto",
}
