// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.3.2
// source: sms/sms.proto

package tycoon_services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SmsManagementClient is the client API for SmsManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SmsManagementClient interface {
	CreateNewSmsBlast(ctx context.Context, in *NewMsg, opts ...grpc.CallOption) (*Msg, error)
	ReturnSmsJobResult(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Msg, error)
}

type smsManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewSmsManagementClient(cc grpc.ClientConnInterface) SmsManagementClient {
	return &smsManagementClient{cc}
}

func (c *smsManagementClient) CreateNewSmsBlast(ctx context.Context, in *NewMsg, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, "/sms.smsManagement/CreateNewSmsBlast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smsManagementClient) ReturnSmsJobResult(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, "/sms.smsManagement/returnSmsJobResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmsManagementServer is the server API for SmsManagement service.
// All implementations must embed UnimplementedSmsManagementServer
// for forward compatibility
type SmsManagementServer interface {
	CreateNewSmsBlast(context.Context, *NewMsg) (*Msg, error)
	ReturnSmsJobResult(context.Context, *Msg) (*Msg, error)
	mustEmbedUnimplementedSmsManagementServer()
}

// UnimplementedSmsManagementServer must be embedded to have forward compatible implementations.
type UnimplementedSmsManagementServer struct {
}

func (UnimplementedSmsManagementServer) CreateNewSmsBlast(context.Context, *NewMsg) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewSmsBlast not implemented")
}
func (UnimplementedSmsManagementServer) ReturnSmsJobResult(context.Context, *Msg) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnSmsJobResult not implemented")
}
func (UnimplementedSmsManagementServer) mustEmbedUnimplementedSmsManagementServer() {}

// UnsafeSmsManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SmsManagementServer will
// result in compilation errors.
type UnsafeSmsManagementServer interface {
	mustEmbedUnimplementedSmsManagementServer()
}

func RegisterSmsManagementServer(s grpc.ServiceRegistrar, srv SmsManagementServer) {
	s.RegisterService(&SmsManagement_ServiceDesc, srv)
}

func _SmsManagement_CreateNewSmsBlast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsManagementServer).CreateNewSmsBlast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sms.smsManagement/CreateNewSmsBlast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsManagementServer).CreateNewSmsBlast(ctx, req.(*NewMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmsManagement_ReturnSmsJobResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsManagementServer).ReturnSmsJobResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sms.smsManagement/returnSmsJobResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsManagementServer).ReturnSmsJobResult(ctx, req.(*Msg))
	}
	return interceptor(ctx, in, info, handler)
}

// SmsManagement_ServiceDesc is the grpc.ServiceDesc for SmsManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SmsManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sms.smsManagement",
	HandlerType: (*SmsManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewSmsBlast",
			Handler:    _SmsManagement_CreateNewSmsBlast_Handler,
		},
		{
			MethodName: "returnSmsJobResult",
			Handler:    _SmsManagement_ReturnSmsJobResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sms/sms.proto",
}
