// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.3.2
// source: ad/ad.proto

package tycoon_services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdManagementClient is the client API for AdManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdManagementClient interface {
	CreateNewVastCompliantAdVideoJob(ctx context.Context, in *NewVast, opts ...grpc.CallOption) (*Vast, error)
	ReturnVastJobResult(ctx context.Context, in *Vast, opts ...grpc.CallOption) (*Vast, error)
}

type adManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewAdManagementClient(cc grpc.ClientConnInterface) AdManagementClient {
	return &adManagementClient{cc}
}

func (c *adManagementClient) CreateNewVastCompliantAdVideoJob(ctx context.Context, in *NewVast, opts ...grpc.CallOption) (*Vast, error) {
	out := new(Vast)
	err := c.cc.Invoke(ctx, "/ad.adManagement/CreateNewVastCompliantAdVideoJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adManagementClient) ReturnVastJobResult(ctx context.Context, in *Vast, opts ...grpc.CallOption) (*Vast, error) {
	out := new(Vast)
	err := c.cc.Invoke(ctx, "/ad.adManagement/returnVastJobResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdManagementServer is the server API for AdManagement service.
// All implementations must embed UnimplementedAdManagementServer
// for forward compatibility
type AdManagementServer interface {
	CreateNewVastCompliantAdVideoJob(context.Context, *NewVast) (*Vast, error)
	ReturnVastJobResult(context.Context, *Vast) (*Vast, error)
	mustEmbedUnimplementedAdManagementServer()
}

// UnimplementedAdManagementServer must be embedded to have forward compatible implementations.
type UnimplementedAdManagementServer struct {
}

func (UnimplementedAdManagementServer) CreateNewVastCompliantAdVideoJob(context.Context, *NewVast) (*Vast, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewVastCompliantAdVideoJob not implemented")
}
func (UnimplementedAdManagementServer) ReturnVastJobResult(context.Context, *Vast) (*Vast, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnVastJobResult not implemented")
}
func (UnimplementedAdManagementServer) mustEmbedUnimplementedAdManagementServer() {}

// UnsafeAdManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdManagementServer will
// result in compilation errors.
type UnsafeAdManagementServer interface {
	mustEmbedUnimplementedAdManagementServer()
}

func RegisterAdManagementServer(s grpc.ServiceRegistrar, srv AdManagementServer) {
	s.RegisterService(&AdManagement_ServiceDesc, srv)
}

func _AdManagement_CreateNewVastCompliantAdVideoJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewVast)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdManagementServer).CreateNewVastCompliantAdVideoJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ad.adManagement/CreateNewVastCompliantAdVideoJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdManagementServer).CreateNewVastCompliantAdVideoJob(ctx, req.(*NewVast))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdManagement_ReturnVastJobResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vast)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdManagementServer).ReturnVastJobResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ad.adManagement/returnVastJobResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdManagementServer).ReturnVastJobResult(ctx, req.(*Vast))
	}
	return interceptor(ctx, in, info, handler)
}

// AdManagement_ServiceDesc is the grpc.ServiceDesc for AdManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ad.adManagement",
	HandlerType: (*AdManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewVastCompliantAdVideoJob",
			Handler:    _AdManagement_CreateNewVastCompliantAdVideoJob_Handler,
		},
		{
			MethodName: "returnVastJobResult",
			Handler:    _AdManagement_ReturnVastJobResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ad/ad.proto",
}
