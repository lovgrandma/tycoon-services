// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.3.2
// source: network/network.proto

package tycoon_services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NetworkManagementClient is the client API for NetworkManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkManagementClient interface {
	NotifyRoom(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Msg, error)
}

type networkManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkManagementClient(cc grpc.ClientConnInterface) NetworkManagementClient {
	return &networkManagementClient{cc}
}

func (c *networkManagementClient) NotifyRoom(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := c.cc.Invoke(ctx, "/network.networkManagement/notifyRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkManagementServer is the server API for NetworkManagement service.
// All implementations must embed UnimplementedNetworkManagementServer
// for forward compatibility
type NetworkManagementServer interface {
	NotifyRoom(context.Context, *Msg) (*Msg, error)
	mustEmbedUnimplementedNetworkManagementServer()
}

// UnimplementedNetworkManagementServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkManagementServer struct {
}

func (UnimplementedNetworkManagementServer) NotifyRoom(context.Context, *Msg) (*Msg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyRoom not implemented")
}
func (UnimplementedNetworkManagementServer) mustEmbedUnimplementedNetworkManagementServer() {}

// UnsafeNetworkManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkManagementServer will
// result in compilation errors.
type UnsafeNetworkManagementServer interface {
	mustEmbedUnimplementedNetworkManagementServer()
}

func RegisterNetworkManagementServer(s grpc.ServiceRegistrar, srv NetworkManagementServer) {
	s.RegisterService(&NetworkManagement_ServiceDesc, srv)
}

func _NetworkManagement_NotifyRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkManagementServer).NotifyRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.networkManagement/notifyRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkManagementServer).NotifyRoom(ctx, req.(*Msg))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkManagement_ServiceDesc is the grpc.ServiceDesc for NetworkManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "network.networkManagement",
	HandlerType: (*NetworkManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "notifyRoom",
			Handler:    _NetworkManagement_NotifyRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network/network.proto",
}
